import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from settings import TOKEN_BOT
import requests
from datetime import datetime
import os
from telebot.types import InputMediaPhoto
import json


bot = telebot.TeleBot(TOKEN_BOT)
FILE_PATH = r'C:\mylife\Git_project\bot_mailing\shedule.json'

user_data = {}

@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚ûï–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post"),
        InlineKeyboardButton("üóÇ–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="show_posts"),
        InlineKeyboardButton("üóì–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="shedule")
    )
    bot.send_message(message.chat.id, START_DESCRIPTION, reply_markup=markup)


START_DESCRIPTION = (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–∞–º–∏.\n\n"
    "üìù –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç (—Ñ–æ—Ç–æ + –æ–ø–∏—Å–∞–Ω–∏–µ + —Å—Å—ã–ª–∫–∞)\n"
    "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n"
    "‚Ä¢ –£–¥–∞–ª—è—Ç—å –ø–æ—Å—Ç—ã —Å –ø–æ–ª–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤\n"
    "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —É–∫–∞–∑–∞–≤ –≤—Ä–µ–º—è, –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ —Ä–µ–∂–∏–º\n\n"

    "‚èπÔ∏è –ö–Ω–æ–ø–∫–∏:\n"
    "‚Ä¢ ‚ûï–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–æ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ\n\n"
    "‚Ä¢  üóÇ–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç - –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏ –∞ —Ç–∞–∫ –∂–µ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–∏—Ç—å\n\n"
    "‚Ä¢  üóì–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏, –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ —Ä–µ–∂–∏–º–∞\n\n"
    "‚ùì –ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã!"
)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "create_post":
        handle_create_post(call)
    elif call.data == "show_posts":
        handle_show_posts(call)
    elif call.data.startswith("view_post_"):
        post_id = int(call.data.split("_")[-1])
        handle_view_post(call.message.chat.id, post_id)
    elif call.data.startswith("delete_post_"):
        post_id = int(call.data.split("_")[-1])
        handle_delete_post(call.message.chat.id, post_id)
    
    
    elif call.data == "shedule":
        handle_shedule(call)
    elif call.data == 'set_interval':
        ask_for_interval(call)
    elif call.data == 'select_mode':
        select_mode(call)
    elif call.data == 'one_time':
        sever_mode(call)
    elif call.data == 'continuous':
        sever_mode(call)
    elif call.data == 'start_shedule':
        ask_for_start_time(call)

def handle_create_post(call):
    user_id = call.from_user.id
    user_data[user_id] = {
        "post_mode": True,
        "media_group": [],
        "media_group_ids": set()
    }
    bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id

    if not is_in_post_mode(user_id):
        return

    file_id = message.photo[-1].file_id
    user_data[user_id]["media_group"].append(file_id)

    mgid = message.media_group_id
    if mgid:
        if mgid not in user_data[user_id]["media_group_ids"]:
            user_data[user_id]["media_group_ids"].add(mgid)
            send_photo_hint(message.chat.id)
    else:
        send_photo_hint(message.chat.id)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id

    if not is_in_post_mode(user_id):
        return

    text_message = message.text
    media_group = user_data[user_id]["media_group"]

    if media_group:
        save_media_and_text(message.chat.id, media_group, text_message)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")

    user_data.pop(user_id)

def send_photo_hint(chat_id):
    bot.send_message(chat_id, "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.")

def is_in_post_mode(user_id):
    return user_id in user_data and user_data[user_id].get("post_mode", False)




# --------------------------------Send post-------------------------------------
def save_media_and_text(chat_id, media_group, text_message):
    posts_file = r"C:\mylife\Git_project\bot_mailing\posts.json"
    media_folder = r"C:\mylife\Git_project\bot_mailing\media"

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(media_folder):
        os.makedirs(media_folder)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—Ç—ã
    if os.path.exists(posts_file):
        with open(posts_file, "r", encoding="utf-8") as f:
            try:
                posts = json.load(f)
            except json.JSONDecodeError:
                posts = []
    else:
        posts = []

    # –û–ø—Ä–µ–¥–µ–ª–∏–º –Ω–æ–≤—ã–π ID
    post_id = posts[-1]["id"] + 1 if posts else 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É
    saved_photos = []
    for idx, file_id in enumerate(media_group):
        file_info = bot.get_file(file_id)
        file_ext = os.path.splitext(file_info.file_path)[-1] or ".jpg"
        file_name = f"post_{post_id}_{idx + 1}{file_ext}"
        file_path = os.path.join(media_folder, file_name)

        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)

        saved_photos.append(file_path.replace("\\", "/"))  # Unix-style –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ —Å–ø–∏—Å–æ–∫
    post_data = {
        "id": post_id,
        "photos": saved_photos,
        "description": text_message
    }
    posts.append(post_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open(posts_file, "w", encoding="utf-8") as f:
        json.dump(posts, f, indent=4, ensure_ascii=False)

    bot.send_message(chat_id, f"‚úÖ –ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")



# --------------------------------Show posts-------------------------------------
def handle_show_posts(call):
    posts_file = r"C:\mylife\Git_project\bot_mailing\posts.json"

    if not os.path.exists(posts_file):
        bot.send_message(call.message.chat.id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        return

    with open(posts_file, "r", encoding="utf-8") as f:
        try:
            posts = json.load(f)
        except json.JSONDecodeError:
            posts = []

    if not posts:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        return

    markup = InlineKeyboardMarkup(row_width=2)
    for post in posts:
        view_button = InlineKeyboardButton(f"üëÅ –ü–æ—Å—Ç #{post['id']}", callback_data=f"view_post_{post['id']}")
        delete_button = InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_post_{post['id']}")
        markup.add(view_button, delete_button)

    bot.send_message(call.message.chat.id, "üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤:", reply_markup=markup)






def handle_view_post(chat_id, post_id):
    posts_file = r"C:\mylife\Git_project\bot_mailing\posts.json"

    if not os.path.exists(posts_file):
        return

    with open(posts_file, "r", encoding="utf-8") as f:
        posts = json.load(f)

    post = next((p for p in posts if p["id"] == post_id), None)
    if not post:
        bot.send_message(chat_id, "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    media_group = []
    photo_files = []

    for photo_path in post["photos"]:
        if os.path.exists(photo_path):
            photo_file = open(photo_path, "rb")
            photo_files.append(photo_file)
            media_group.append(InputMediaPhoto(photo_file))

    try:
        if media_group:
            if len(media_group) == 1:
                bot.send_photo(chat_id, media_group[0].media, caption=post["description"])
            else:
                media_group[0].caption = post["description"]
                bot.send_media_group(chat_id, media_group)
        else:
            bot.send_message(chat_id, "–§–∞–π–ª—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    finally:
        for f in photo_files:
            f.close()






# --------------------------------Del posts-------------------------------------

def handle_delete_post(chat_id, post_id):
    posts_file = r"C:\mylife\Git_project\bot_mailing\posts.json"

    if not os.path.exists(posts_file):
        bot.send_message(chat_id, "–§–∞–π–ª —Å –ø–æ—Å—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(posts_file, "r", encoding="utf-8") as f:
        posts = json.load(f)

    post = next((p for p in posts if p["id"] == post_id), None)
    if not post:
        bot.send_message(chat_id, "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ—Ñ–∞–π–ª–æ–≤
    for photo_path in post["photos"]:
        try:
            if os.path.exists(photo_path):
                os.remove(photo_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {photo_path}: {e}")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    posts = [p for p in posts if p["id"] != post_id]

    with open(posts_file, "w", encoding="utf-8") as f:
        json.dump(posts, f, indent=4, ensure_ascii=False)

    bot.send_message(chat_id, f"‚ùå –ü–æ—Å—Ç #{post_id} —É–¥–∞–ª—ë–Ω.")







# --------------------------------Shedule-------------------------------------
def handle_shedule(call):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üìÜ –ù–∞—á–∞–ª–æ –†–∞—Å—Å—ã–ª–∫–∏", callback_data="start_shedule"),
        InlineKeyboardButton("‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å—Ç–∞", callback_data="set_interval"),
        InlineKeyboardButton("‚öôÔ∏è –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞", callback_data="select_mode")
    )

    bot.send_message(call.message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n‚Ä¢ –ù–∞—á–∞–ª–æ –†–∞—Å—Å—ã–ª–∫–∏ - –≤—Ä–µ–º—è c –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞\n\n‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å—Ç–∞ - –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç\n\n‚Ä¢ –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ –±—É–¥—É—Ç –ª–∏ –ø–æ—Å—Ç—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ\n\n\n ", reply_markup=markup)

def ask_for_start_time(call):
    msg = bot.send_message(call.message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è c –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12:00):")
    bot.register_next_step_handler(msg, save_start_time)

def ask_for_interval(call):
    msg = bot.send_message(call.message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å—Ç–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä: \n\n‚Ä¢ 24:00 (1 –¥–µ–Ω—å)\n\n‚Ä¢ 00:30 (30 –º–∏–Ω—É—Ç)\n\n‚Ä¢ 00:01 (1 –º–∏–Ω—É—Ç–∞)")
    bot.register_next_step_handler(msg, save_interval)


def save_start_time(message):
    start_time = message.text

    try:
        try:
            with open(FILE_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            data = {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        data["start_time"] = start_time

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open(FILE_PATH, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

        bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {start_time}")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")



def save_interval(message):
    interval = message.text

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        try:
            with open(FILE_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            data = {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        data["interval"] = interval

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open(FILE_PATH, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

        bot.send_message(message.chat.id, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {interval}")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")



def sever_mode(call):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        try:
            with open(FILE_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            data = {}

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        data["mode"] = call.data

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open(FILE_PATH, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

        bot.send_message(call.message.chat.id, f"‚úÖ –†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {call.data}")

    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")


def select_mode(call):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("1Ô∏è‚É£–ü–æ–ª—É—á–∞—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ", callback_data="one_time"),
        InlineKeyboardButton("üîÇ–ü–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ", callback_data="continuous")
    )

    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è:", call.message.chat.id, call.message.message_id, reply_markup=markup)





bot.polling(none_stop=True)