import os
import json
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from settings import main_token
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaVideo, InputMediaPhoto
from db import init_db, load_sent_posts, add_sent_post, migrate_from_json
import time
import requests


BOT_TOKEN = main_token
POSTS_FILE_PATH = "posts.json"
COUNT_FILE = "count.txt"
USERS_FILE = "users_id.txt"
SHEDULE_FILE_PATH = "shedule.json"
SENT_POSTS_FILE = "sent_posts.json"

bot = telebot.TeleBot(BOT_TOKEN)
scheduler = BackgroundScheduler()
scheduler.start()

conn = init_db()
migrate_from_json(conn, SENT_POSTS_FILE)
sent_posts = load_sent_posts(conn)


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_chat_id = message.chat.id
    username = message.from_user.username or "unknown"

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. ID: {user_chat_id}")

    if is_new_user(username):
        print(username, "–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        save_user_id(username)
        increment_user_count()
    
    
    elif user_chat_id not in sent_posts:
        print("–°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        sent_posts[user_chat_id] = set()
        send_next_post(user_chat_id)

    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è")
        last_post_id = max(sent_posts.get(user_chat_id, [])) if sent_posts.get(user_chat_id) else None
        
        all_post_ids = {post['id'] for post in load_posts()}
        user_sent_ids = sent_posts.get(user_chat_id, set())

        remaining_posts = all_post_ids - user_sent_ids
        if remaining_posts:
            print("–ï—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π")
            send_next_post(user_chat_id)
        else:
            print("–í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            handle_view_post(user_chat_id, last_post_id)





def load_posts():
    if not os.path.exists(POSTS_FILE_PATH):
        return []
    with open(POSTS_FILE_PATH, "r", encoding="utf-8") as f:
        return json.load(f)


# ----------------–ø–æ–∫–∞–∑ –ø–æ—Å—Ç–∞-------------------
def handle_view_post(chat_id, post_id):
    posts = load_posts_for_view_post()
    if posts is None:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤.")
        return False

    post = get_post_by_id(posts, post_id)
    if not post:
        print("–ü–æ—Å—Ç –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω")
        return False

    media_items, voice_file, video_note_file, open_files = prepare_media(post)
    description = post.get("description", "")
    button = post.get("button", [])
    markup = create_inline_markup(post)

    try:
        send_post_content(chat_id, description, markup, media_items, voice_file, video_note_file, post_id, button)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
        return False
    finally:
        for f in open_files:
            f.close()



def load_posts_for_view_post():
    if not os.path.exists(POSTS_FILE_PATH):
        print("–§–∞–π–ª —Å –ø–æ—Å—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    with open(POSTS_FILE_PATH, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []


def get_post_by_id(posts, post_id):
    return next((p for p in posts if p["id"] == post_id), None)


def prepare_media(post):
    media_items = []
    open_files = []

    voice_file = None
    video_note_file = None

    for item in post.get("photos", []):
        media_type = item.get("type")
        path = item.get("path")

        if not os.path.exists(path):
            continue

        file = open(path, "rb")
        open_files.append(file)

        if media_type == "photo":
            media_items.append(("photo", file))
        elif media_type == "video":
            media_items.append(("video", file))
        elif media_type == "voice":
            voice_file = file
        elif media_type == "video_note":
            video_note_file = file
        else:
            file.close()

    return media_items, voice_file, video_note_file, open_files


from telebot import types

def create_inline_markup(post):
    button_data = post.get("button")

    if not button_data:
        return None

    markup = types.InlineKeyboardMarkup()

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    if isinstance(button_data, list):
        for btn in button_data:
            if "text" in btn and "url" in btn:
                markup.add(types.InlineKeyboardButton(text=btn["text"], url=btn["url"]))

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç-–∫–Ω–æ–ø–∫–∞
    elif isinstance(button_data, dict):
        if "text" in button_data and "url" in button_data:
            markup.add(types.InlineKeyboardButton(text=button_data["text"], url=button_data["url"]))

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
    if not markup.keyboard:
        return None

    return markup

def send_post_content(chat_id, description, markup, media_items, voice_file, video_note_file, post_id, button):
    sent_any = False

    # === –ï—Å–ª–∏ –µ—Å—Ç—å video_note ===
    if video_note_file:
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º video_note")
        bot.send_video_note(chat_id, video_note_file)
        sent_any = True

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –Ω–æ –Ω–µ—Ç description ‚Äî –¥–æ–±–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ "üëá –ü–æ–¥—Ä–æ–±–Ω–µ–µ:"
        if button and not description:
            print("–ï—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –Ω–æ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º 'üëá –ü–æ–¥—Ä–æ–±–Ω–µ–µ:'")
            bot.send_message(chat_id, "üëá –ü–æ–¥—Ä–æ–±–Ω–µ–µ:", reply_markup=markup)

        elif button and description:
            print("–ï—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ—Å–ª–µ video_note")
            bot.send_message(chat_id, description, reply_markup=markup)

        # –ï—Å–ª–∏ –µ—Å—Ç—å description, —Ç–æ –¥–æ–±–∞–≤–∏–º –µ–≥–æ (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
        elif description:
            print("–ï—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ—Å–ª–µ video_note")
            bot.send_message(chat_id, description, reply_markup=markup)



    # === –ï—Å–ª–∏ –µ—Å—Ç—å 1 –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) ===
    if len(media_items) == 1:
        print("len(media_items) == 1")
        media_type, media_file = media_items[0]
        if media_type == "photo":
            bot.send_photo(chat_id, media_file, caption=description, reply_markup=markup)
        elif media_type == "video":
            bot.send_video(chat_id, media_file, caption=description, reply_markup=markup)
        sent_any = True

    # === –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ ===
    if len(media_items) > 1:
        print("len(media_items) > 1")
        media_group = []
        for m_type, f in media_items:
            if m_type == "photo":
                media_group.append(InputMediaPhoto(f))
            elif m_type == "video":
                media_group.append(InputMediaVideo(f))
        bot.send_media_group(chat_id, media_group)
        sent_any = True

        if description or markup:
            bot.send_message(chat_id, description, reply_markup=markup)

    # === –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
    if voice_file:
        print("voice_file")
        bot.send_voice(chat_id, voice_file)
        sent_any = True

    # === –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º ===
    if not sent_any and not description and not markup:
        print("–ù–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä.")

# -------------------–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤------------------------
def send_next_post(chat_id):
    print(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è {chat_id}")
    global sent_posts
    posts = load_posts_for_view_post()
    if not posts or chat_id is None:
        return
    
    if chat_id not in sent_posts:
        sent_posts[chat_id] = set()

    for post in posts:
        post_id = post["id"]
        if post_id not in sent_posts[chat_id]:
            was_sent = handle_view_post(chat_id, post_id)
            if was_sent:
                sent_posts[chat_id].add(post_id)
                add_sent_post(conn, chat_id, post_id)
            break


    hours, minutes = load_schedule_times()
    
    if scheduler.get_job(f'post_job_{chat_id}'):
        scheduler.remove_job(f'post_job_{chat_id}')
    
    scheduler.add_job(send_next_post, 'interval', hours=hours, minutes=minutes, id=f'post_job_{chat_id}', args=[chat_id])


def load_schedule_times():
    with open(SHEDULE_FILE_PATH, 'r', encoding='utf-8') as file:
        data = json.load(file)
    interval_str = data["interval"]
    hours, minutes = map(int, interval_str.split(":"))
    return hours, minutes



def increment_user_count():
    count = get_user_count() + 1
    with open(COUNT_FILE, "w") as f:
        f.write(str(count))


def is_new_user(username):
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = f.read().splitlines()
        return f"@{username}" not in users
    except FileNotFoundError:
        return True


def save_user_id(user_id):
    with open(USERS_FILE, "a") as f:
        f.write(f"@{user_id}\n")

def get_user_count():
    try:
        with open(COUNT_FILE, "r") as f:
            return int(f.read().strip())
    except (FileNotFoundError, ValueError):
        return 0



def start_sending_to_existing_users():
    for chat_id in sent_posts.keys():
        print(f"‚ñ∂Ô∏è start_sending_to_existing_users {chat_id}")
        send_next_post(chat_id)

start_sending_to_existing_users()

while True:
    try:
        bot.polling(none_stop=True)
    except requests.exceptions.ReadTimeout:
        print("Read timeout, retrying...")
        time.sleep(5)
    except Exception as e:
        print(f"Polling failed: {e}")
        time.sleep(5)